// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("candidate")
  accounts      Account[]
  sessions      Session[]
  
  // Interview relations
  hostedInterviews     InterviewSession[] @relation("InterviewHost")
  participantInterviews InterviewSession[] @relation("InterviewParticipant")
  chatMessages         ChatMessage[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model InterviewSession {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      String   @default("waiting") // waiting, active, completed, cancelled
  
  hostId        String
  participantId String?
  
  host        User  @relation("InterviewHost", fields: [hostId], references: [id])
  participant User? @relation("InterviewParticipant", fields: [participantId], references: [id])
  
  // Interview room settings
  roomId           String    @unique
  joinCode         String?   @unique // 6-digit code for easy joining
  maxParticipants  Int       @default(2)
  recordingEnabled Boolean   @default(false)
  
  // Invitation settings
  participantEmail String?   // Email of invited participant
  allowPublicJoin  Boolean   @default(false) // Allow anyone with link/code to join
  
  // Code editor content
  codeContent String?
  language    String? @default("javascript")
  
  // Chat messages
  chatMessages ChatMessage[]
  
  // Relations
  invitations  Invitation[]
  
  startedAt   DateTime?
  endedAt     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  status    String   @default("pending") // pending, accepted, declined
  token     String   @unique
  
  sessionId String
  session   InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  sentAt    DateTime @default(now())
  createdAt DateTime @default(now())
  
  @@unique([email, sessionId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  message   String
  userId    String
  sessionId String
  
  user    User             @relation(fields: [userId], references: [id])
  session InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
}
